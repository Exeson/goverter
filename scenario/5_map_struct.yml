input:
    input.go: |
        package slices

        // genconv:converter
        type Converter interface {
            Convert(source map[string]Input) map[string]Output
            Convert2(source map[Output]Input) map[Input]Output
        }

        type Input struct {
            Name string
            Age int
        }
        type Output struct {
            Name string
            Age int
        }
success: |
    // Code generated by github.com/jmattheis/go-genconv, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/go-genconv/execution"

    type Converter struct{}

    func (c *Converter) slicesInputToSlicesOutput(source execution.Input) execution.Output {
    	var output execution.Output
    	output.Name = source.Name
    	output.Age = source.Age
    	return output
    }
    func (c *Converter) Convert(source map[string]execution.Input) map[string]execution.Output {
    	targetMap := make(map[string]execution.Output, len(source))
    	for key, value := range source {
    		targetMap[key] = c.slicesInputToSlicesOutput(value)
    	}
    	return targetMap
    }
    func (c *Converter) slicesOutputToSlicesInput(source execution.Output) execution.Input {
    	var input execution.Input
    	input.Name = source.Name
    	input.Age = source.Age
    	return input
    }
    func (c *Converter) Convert2(source map[execution.Output]execution.Input) map[execution.Input]execution.Output {
    	targetMap := make(map[execution.Input]execution.Output, len(source))
    	for key, value := range source {
    		targetMap[c.slicesOutputToSlicesInput(key)] = c.slicesInputToSlicesOutput(value)
    	}
    	return targetMap
    }
