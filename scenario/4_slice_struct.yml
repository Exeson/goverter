input:
    input.go: |
        package slices

        // genconv:converter
        type Converter interface {
            Convert(source []Input) []Output
        }

        type Input struct {
            Name string
            Age int
        }
        type Output struct {
            Name string
            Age int
        }
success: |
    // Code generated by github.com/jmattheis/go-genconv, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/go-genconv/execution"

    type Converter struct{}

    func (c *Converter) slicesInputToSlicesOutput(source execution.Input) execution.Output {
    	var output execution.Output
    	output.Name = source.Name
    	output.Age = source.Age
    	return output
    }
    func (c *Converter) Convert(source []execution.Input) []execution.Output {
    	targetSlice := make([]execution.Output, len(source))
    	for i := 0; i < len(source); i++ {
    		targetSlice[i] = c.slicesInputToSlicesOutput(source[i])
    	}
    	return targetSlice
    }
