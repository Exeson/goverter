input:
    input.go: |
        package structs

        // genconv:converter
        type Converter interface {
            Convert(source Input) Output
        }

        type Input struct {
            Value *InputA
        }
        type Output struct {
            Value *OutputA
        }

        type InputA struct {
            Value *InputB
        }
        type InputB struct {
            Value *InputA
        }
        type OutputA struct {
            Value *OutputB
        }
        type OutputB struct {
            Value *OutputA
        }
success: |
    // Code generated by github.com/jmattheis/go-genconv, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/go-genconv/execution"

    type Converter struct{}

    func (c *Converter) structsInputBToStructsOutputB(source execution.InputB) execution.OutputB {
    	var outputB execution.OutputB
    	var outer *execution.OutputA
    	if source.Value != nil {
    		temp := c.structsInputAToStructsOutputA(*source.Value)
    		outer = &temp
    	}
    	outputB.Value = outer
    	return outputB
    }
    func (c *Converter) structsInputAToStructsOutputA(source execution.InputA) execution.OutputA {
    	var outputA execution.OutputA
    	var outer *execution.OutputB
    	if source.Value != nil {
    		temp := c.structsInputBToStructsOutputB(*source.Value)
    		outer = &temp
    	}
    	outputA.Value = outer
    	return outputA
    }
    func (c *Converter) Convert(source execution.Input) execution.Output {
    	var output execution.Output
    	var outer *execution.OutputA
    	if source.Value != nil {
    		temp := c.structsInputAToStructsOutputA(*source.Value)
    		outer = &temp
    	}
    	output.Value = outer
    	return output
    }
